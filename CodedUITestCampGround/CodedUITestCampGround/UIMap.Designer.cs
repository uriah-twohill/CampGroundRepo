// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 16.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestCampGround
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Testing Email
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            HtmlEdit uIEmailEdit = this.UILoginFinalAssessmentWindow.UILoginFinalAssessmentDocument.UIEmailEdit;
            #endregion

            // Verify that the 'Name' property of 'Email' text box equals 'Input.Email'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIEmailEditName, uIEmailEdit.Name, "Solution should be Email, otherwise error");
        }
        
        /// <summary>
        /// Testing Password
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            HtmlEdit uIPasswordEdit = this.UILoginFinalAssessmentWindow.UILoginFinalAssessmentDocument.UIPasswordEdit;
            #endregion

            // Verify that the 'Name' property of 'Password' text box equals 'Input.Password'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIPasswordEditName, uIPasswordEdit.Name, "Solution should be password, otherwise error");
        }
        
        /// <summary>
        /// Testing Login button
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            HtmlButton uILoginButton = this.UILoginFinalAssessmentWindow.UILoginFinalAssessmentDocument.UILoginButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Log in' button equals 'Web'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UILoginButtonTechnologyName, uILoginButton.TechnologyName, "Solution should be Log in, otherwise error");
        }
        
        /// <summary>
        /// Testing Forgot Your password
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            HtmlHyperlink uIForgotyourpasswordHyperlink = this.UILoginFinalAssessmentWindow.UILoginFinalAssessmentDocument.UIForgotyourpasswordHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Forgot your password?' link equals 'Web'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIForgotyourpasswordHyperlinkTechnologyName, uIForgotyourpasswordHyperlink.TechnologyName, "Solution should be Forgot your password, otherwise error");
        }
        
        /// <summary>
        /// Testing Register as a new user
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            HtmlHyperlink uIRegisterasanewuserHyperlink = this.UILoginFinalAssessmentWindow.UILoginFinalAssessmentDocument.UIAccountCustom.UIRegisterasanewuserHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Register as a new user' link equals 'Web'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIRegisterasanewuserHyperlinkTechnologyName, uIRegisterasanewuserHyperlink.TechnologyName, "Solution should be Register as a new user, otherwise error");
        }
        
        /// <summary>
        /// Testing Email
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            HtmlEdit uIEmailEdit = this.UILoginFinalAssessmentWindow.UIRegisterFinalAssessmDocument.UIEmailEdit;
            #endregion

            // Verify that the 'Name' property of 'Email' text box equals 'Input.Email'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIEmailEditName, uIEmailEdit.Name, "Solution should be Email, otherwise error");
        }
        
        /// <summary>
        /// Testing Password
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            HtmlEdit uIPasswordEdit = this.UILoginFinalAssessmentWindow.UIRegisterFinalAssessmDocument.UIPasswordEdit;
            #endregion

            // Verify that the 'Name' property of 'Password' text box equals 'Input.Password'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UIPasswordEditName, uIPasswordEdit.Name, "Solution should be Password, otherwise error");
        }
        
        /// <summary>
        /// Testing Confirm Password
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            HtmlEdit uIConfirmpasswordEdit = this.UILoginFinalAssessmentWindow.UIRegisterFinalAssessmDocument.UIConfirmpasswordEdit;
            #endregion

            // Verify that the 'Name' property of 'Confirm password' text box equals 'Input.ConfirmPassword'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIConfirmpasswordEditName, uIConfirmpasswordEdit.Name, "Solution should be Confirm Password");
        }
        
        /// <summary>
        /// Testing Register
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            HtmlButton uIRegisterButton = this.UILoginFinalAssessmentWindow.UIRegisterFinalAssessmDocument.UIRegisterButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Register' button equals 'Web'
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UIRegisterButtonTechnologyName, uIRegisterButton.TechnologyName, "Solution should be Register, otherwise error");
        }
        
        /// <summary>
        /// Testing Home Page
        /// </summary>
        public void AssertMethod10()
        {
            #region Variable Declarations
            HtmlImage uILogoImage = this.UILoginFinalAssessmentWindow.UIHomePageFinalAssessmDocument.UILogoImage;
            #endregion

            // Verify that the 'TechnologyName' property of 'Logo' image equals 'Web'
            Assert.AreEqual(this.AssertMethod10ExpectedValues.UILogoImageTechnologyName, uILogoImage.TechnologyName, "Solution should be home page, otherwise error");
        }
        
        /// <summary>
        /// Testing Customer
        /// </summary>
        public void AssertMethod11()
        {
            #region Variable Declarations
            HtmlHyperlink uICustomersHyperlink = this.UILoginFinalAssessmentWindow.UIHomePageFinalAssessmDocument.UICustomersHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Customers' link equals 'Web'
            Assert.AreEqual(this.AssertMethod11ExpectedValues.UICustomersHyperlinkTechnologyName, uICustomersHyperlink.TechnologyName, "Solution should be Customer, otherwise error.");
        }
        
        /// <summary>
        /// Testing Products
        /// </summary>
        public void AssertMethod12()
        {
            #region Variable Declarations
            HtmlHyperlink uIProductsHyperlink = this.UILoginFinalAssessmentWindow.UIHomePageFinalAssessmDocument.UIProductsHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Products' link equals 'Web'
            Assert.AreEqual(this.AssertMethod12ExpectedValues.UIProductsHyperlinkTechnologyName, uIProductsHyperlink.TechnologyName, "Solution should be Products, otherwise error");
        }
        
        /// <summary>
        /// Testing Orders
        /// </summary>
        public void AssertMethod13()
        {
            #region Variable Declarations
            HtmlHyperlink uIOrdersHyperlink = this.UILoginFinalAssessmentWindow.UIHomePageFinalAssessmDocument.UIOrdersHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Orders' link equals 'Web'
            Assert.AreEqual(this.AssertMethod13ExpectedValues.UIOrdersHyperlinkTechnologyName, uIOrdersHyperlink.TechnologyName, "Solution should be Orders, otherwise error");
        }
        
        /// <summary>
        /// Testing Manage Accounts
        /// </summary>
        public void AssertMethod14()
        {
            #region Variable Declarations
            HtmlHyperlink uIHellotesttestingcomHyperlink = this.UILoginFinalAssessmentWindow.UIHomePageFinalAssessmDocument.UIHellotesttestingcomHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Hello test@testing.com' link equals 'Web'
            Assert.AreEqual(this.AssertMethod14ExpectedValues.UIHellotesttestingcomHyperlinkTechnologyName, uIHellotesttestingcomHyperlink.TechnologyName, "Solution should be Manage Account , otherwise error");
        }
        
        /// <summary>
        /// Testing Logout
        /// </summary>
        public void AssertMethod15()
        {
            #region Variable Declarations
            HtmlButton uILogoutButton = this.UILoginFinalAssessmentWindow.UIHomePageFinalAssessmDocument.UILogoutButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Logout' button equals 'Web'
            Assert.AreEqual(this.AssertMethod15ExpectedValues.UILogoutButtonTechnologyName, uILogoutButton.TechnologyName, "Solution should be Logout, otherwisee error");
        }
        
        /// <summary>
        /// Testing Create New
        /// </summary>
        public void AssertMethod16()
        {
            #region Variable Declarations
            HtmlHyperlink uICreateNewHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument.UICreateNewHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Create New' link equals 'Web'
            Assert.AreEqual(this.AssertMethod16ExpectedValues.UICreateNewHyperlinkTechnologyName, uICreateNewHyperlink.TechnologyName, "Solution should be Create New, otherwise error");
        }
        
        /// <summary>
        /// Testing Name
        /// </summary>
        public void AssertMethod17()
        {
            #region Variable Declarations
            HtmlEdit uINameEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument.UINameEdit;
            #endregion

            // Verify that the 'Name' property of 'Name' text box equals 'Name'
            Assert.AreEqual(this.AssertMethod17ExpectedValues.UINameEditName, uINameEdit.Name, "Solution should be Name, otherwise error");
        }
        
        /// <summary>
        /// Testing Age
        /// </summary>
        public void AssertMethod18()
        {
            #region Variable Declarations
            HtmlEdit uIAgeEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument.UIAgeEdit;
            #endregion

            // Verify that the 'Name' property of 'Age' text box equals 'Age'
            Assert.AreEqual(this.AssertMethod18ExpectedValues.UIAgeEditName, uIAgeEdit.Name, "Solution should be Age, otherwise error");
        }
        
        /// <summary>
        /// Testing Phone
        /// </summary>
        public void AssertMethod19()
        {
            #region Variable Declarations
            HtmlEdit uIPhoneEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument.UIPhoneEdit;
            #endregion

            // Verify that the 'Name' property of 'Phone' text box equals 'Phone'
            Assert.AreEqual(this.AssertMethod19ExpectedValues.UIPhoneEditName, uIPhoneEdit.Name, "Solution should be Phone, otherwise error");
        }
        
        /// <summary>
        /// Testing Create
        /// </summary>
        public void AssertMethod20()
        {
            #region Variable Declarations
            HtmlInputButton uICreateButton = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument.UICreateButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Create' button equals 'Web'
            Assert.AreEqual(this.AssertMethod20ExpectedValues.UICreateButtonTechnologyName, uICreateButton.TechnologyName, "Solution should be Create, otherwise error");
        }
        
        /// <summary>
        /// Testing Back to list
        /// </summary>
        public void AssertMethod21()
        {
            #region Variable Declarations
            HtmlHyperlink uIBacktoListHyperlink = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument.UIBacktoListHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
            Assert.AreEqual(this.AssertMethod21ExpectedValues.UIBacktoListHyperlinkTechnologyName, uIBacktoListHyperlink.TechnologyName, "Solution should be Back to list, otherwise error");
        }
        
        /// <summary>
        /// Testing Details
        /// </summary>
        public void AssertMethod22()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument.UIEditHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Edit' link equals 'Web'
            Assert.AreEqual(this.AssertMethod22ExpectedValues.UIEditHyperlinkTechnologyName, uIEditHyperlink.TechnologyName, "Solution should be Edit, otherwise error");
        }
        
        /// <summary>
        /// Testing Delete
        /// </summary>
        public void AssertMethod23()
        {
            #region Variable Declarations
            HtmlHyperlink uIDeleteHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument.UIDeleteHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Delete' link equals 'Web'
            Assert.AreEqual(this.AssertMethod23ExpectedValues.UIDeleteHyperlinkTechnologyName, uIDeleteHyperlink.TechnologyName, "Solution should be Delete, otherwise error");
        }
        
        /// <summary>
        /// Testing Delete, otherwise error
        /// </summary>
        public void AssertMethod24()
        {
            #region Variable Declarations
            HtmlInputButton uIDeleteButton = this.UILoginFinalAssessmentWindow.UIDeleteFinalAssessmenDocument.UIDeleteButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Delete' button equals 'Web'
            Assert.AreEqual(this.AssertMethod24ExpectedValues.UIDeleteButtonTechnologyName, uIDeleteButton.TechnologyName, "Solution should be Delete, otherwise error");
        }
        
        /// <summary>
        /// Testing Back to list
        /// </summary>
        public void AssertMethod25()
        {
            #region Variable Declarations
            HtmlHyperlink uIBacktoListHyperlink = this.UILoginFinalAssessmentWindow.UIDeleteFinalAssessmenDocument.UIBacktoListHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
            Assert.AreEqual(this.AssertMethod25ExpectedValues.UIBacktoListHyperlinkTechnologyName, uIBacktoListHyperlink.TechnologyName, "Solution should be Back to list, otherwise error");
        }
        
        /// <summary>
        /// Testing Create New
        /// </summary>
        public void AssertMethod26()
        {
            #region Variable Declarations
            HtmlHyperlink uICreateNewHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument1.UICreateNewHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Create New' link equals 'Web'
            Assert.AreEqual(this.AssertMethod26ExpectedValues.UICreateNewHyperlinkTechnologyName, uICreateNewHyperlink.TechnologyName, "Solution should be Create New, otherwise error");
        }
        
        /// <summary>
        /// Testing Pid
        /// </summary>
        public void AssertMethod27()
        {
            #region Variable Declarations
            HtmlEdit uIPidEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument1.UIPidEdit;
            #endregion

            // Verify that the 'Name' property of 'Pid' text box equals 'Pid'
            Assert.AreEqual(this.AssertMethod27ExpectedValues.UIPidEditName, uIPidEdit.Name, "Solution should be Pid, otherwise error");
        }
        
        /// <summary>
        /// Testing Product Name
        /// </summary>
        public void AssertMethod28()
        {
            #region Variable Declarations
            HtmlEdit uIProductNameEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument1.UIProductNameEdit;
            #endregion

            // Verify that the 'Name' property of 'ProductName' text box equals 'ProductName'
            Assert.AreEqual(this.AssertMethod28ExpectedValues.UIProductNameEditName, uIProductNameEdit.Name, "Solution should be ProductNAme, otherwise error");
        }
        
        /// <summary>
        /// Testing Description
        /// </summary>
        public void AssertMethod29()
        {
            #region Variable Declarations
            HtmlEdit uIDescriptionEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument1.UIDescriptionEdit;
            #endregion

            // Verify that the 'Name' property of 'Description' text box equals 'Description'
            Assert.AreEqual(this.AssertMethod29ExpectedValues.UIDescriptionEditName, uIDescriptionEdit.Name, "Solution should be Description, otherwise error");
        }
        
        /// <summary>
        /// Testing Price
        /// </summary>
        public void AssertMethod30()
        {
            #region Variable Declarations
            HtmlEdit uIPriceEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument1.UIPriceEdit;
            #endregion

            // Verify that the 'Name' property of 'Price' text box equals 'Price'
            Assert.AreEqual(this.AssertMethod30ExpectedValues.UIPriceEditName, uIPriceEdit.Name, "Solution should be Price, otherwise error");
        }
        
        /// <summary>
        /// Testing Rating
        /// </summary>
        public void AssertMethod31()
        {
            #region Variable Declarations
            HtmlEdit uIRatingEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument1.UIRatingEdit;
            #endregion

            // Verify that the 'Name' property of 'Rating' text box equals 'Rating'
            Assert.AreEqual(this.AssertMethod31ExpectedValues.UIRatingEditName, uIRatingEdit.Name, "Solution should be Rating, otherwise error");
        }
        
        /// <summary>
        /// Testing Category
        /// </summary>
        public void AssertMethod32()
        {
            #region Variable Declarations
            HtmlEdit uICategoryEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument1.UICategoryEdit;
            #endregion

            // Verify that the 'Name' property of 'Category' text box equals 'Category'
            Assert.AreEqual(this.AssertMethod32ExpectedValues.UICategoryEditName, uICategoryEdit.Name, "Solution should be Category, otherwise error");
        }
        
        /// <summary>
        /// Testing Create
        /// </summary>
        public void AssertMethod33()
        {
            #region Variable Declarations
            HtmlInputButton uICreateButton = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument1.UICreateButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Create' button equals 'Web'
            Assert.AreEqual(this.AssertMethod33ExpectedValues.UICreateButtonTechnologyName, uICreateButton.TechnologyName, "Solution should be Create, otherwise error");
        }
        
        /// <summary>
        /// Testing Back to list
        /// </summary>
        public void AssertMethod34()
        {
            #region Variable Declarations
            HtmlHyperlink uIBacktoListHyperlink = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument1.UIBacktoListHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
            Assert.AreEqual(this.AssertMethod34ExpectedValues.UIBacktoListHyperlinkTechnologyName, uIBacktoListHyperlink.TechnologyName, "Solution should be Back To List, otherwise error");
        }
        
        /// <summary>
        /// Testing Product Category
        /// </summary>
        public void AssertMethod35()
        {
            #region Variable Declarations
            HtmlComboBox uIProductCategoryComboBox = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument1.UIProductCategoryComboBox;
            #endregion

            // Verify that the 'Name' property of 'ProductCategory' combo box equals 'ProductCategory'
            Assert.AreEqual(this.AssertMethod35ExpectedValues.UIProductCategoryComboBoxName, uIProductCategoryComboBox.Name, "Solution should be Product Category, otherwise error");
        }
        
        /// <summary>
        /// Testing Product Name
        /// </summary>
        public void AssertMethod36()
        {
            #region Variable Declarations
            HtmlEdit uISearchStringEdit = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument1.UISearchStringEdit;
            #endregion

            // Verify that the 'Name' property of 'SearchString' text box equals 'SearchString'
            Assert.AreEqual(this.AssertMethod36ExpectedValues.UISearchStringEditName, uISearchStringEdit.Name, "Solution should be Product Name, otherwise error");
        }
        
        /// <summary>
        /// Testing Filter
        /// </summary>
        public void AssertMethod37()
        {
            #region Variable Declarations
            HtmlInputButton uIFilterButton = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument1.UIFilterButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Filter' button equals 'Web'
            Assert.AreEqual(this.AssertMethod37ExpectedValues.UIFilterButtonTechnologyName, uIFilterButton.TechnologyName, "Solution should be Filter , otherwise error");
        }
        
        /// <summary>
        /// Testing Edit
        /// </summary>
        public void AssertMethod38()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument1.UIEditHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Edit' link equals 'Web'
            Assert.AreEqual(this.AssertMethod38ExpectedValues.UIEditHyperlinkTechnologyName, uIEditHyperlink.TechnologyName, "Solution should be Edit, otherwise error");
        }
        
        /// <summary>
        /// Testing Details
        /// </summary>
        public void AssertMethod39()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument1.UIDetailsHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Details' link equals 'Web'
            Assert.AreEqual(this.AssertMethod39ExpectedValues.UIDetailsHyperlinkTechnologyName, uIDetailsHyperlink.TechnologyName, "Solution should be Details, otherwise error");
        }
        
        /// <summary>
        /// Testing Delete
        /// </summary>
        public void AssertMethod40()
        {
            #region Variable Declarations
            HtmlHyperlink uIDeleteHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument1.UIDeleteHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Delete' link equals 'Web'
            Assert.AreEqual(this.AssertMethod40ExpectedValues.UIDeleteHyperlinkTechnologyName, uIDeleteHyperlink.TechnologyName, "Solution should be Delete, otherwise error");
        }
        
        /// <summary>
        /// Testing Create New
        /// </summary>
        public void AssertMethod41()
        {
            #region Variable Declarations
            HtmlHyperlink uICreateNewHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument2.UICreateNewHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Create New' link equals 'Web'
            Assert.AreEqual(this.AssertMethod41ExpectedValues.UICreateNewHyperlinkTechnologyName, uICreateNewHyperlink.TechnologyName, "Solution should be Create New, otherwise error");
        }
        
        /// <summary>
        /// Testing Create New
        /// </summary>
        public void AssertMethod42()
        {
            #region Variable Declarations
            HtmlHyperlink uICreateNewHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument2.UICreateNewHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Create New' link equals 'Web'
            Assert.AreEqual(this.AssertMethod42ExpectedValues.UICreateNewHyperlinkTechnologyName, uICreateNewHyperlink.TechnologyName, "Solution should be Create New, otherwise error");
        }
        
        /// <summary>
        /// Testing Cid
        /// </summary>
        public void AssertMethod43()
        {
            #region Variable Declarations
            HtmlComboBox uICidComboBox = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument2.UICidComboBox;
            #endregion

            // Verify that the 'Name' property of 'Cid' combo box equals 'Cid'
            Assert.AreEqual(this.AssertMethod43ExpectedValues.UICidComboBoxName, uICidComboBox.Name, "Solution should be Cid, otherwise error");
        }
        
        /// <summary>
        /// Testing Pid
        /// </summary>
        public void AssertMethod44()
        {
            #region Variable Declarations
            HtmlComboBox uIPidComboBox = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument2.UIPidComboBox;
            #endregion

            // Verify that the 'Name' property of 'Pid' combo box equals 'Pid'
            Assert.AreEqual(this.AssertMethod44ExpectedValues.UIPidComboBoxName, uIPidComboBox.Name, "Solution should be Pid, otherwise error");
        }
        
        /// <summary>
        /// Testing Purchase Date
        /// </summary>
        public void AssertMethod45()
        {
            #region Variable Declarations
            HtmlEdit uIPurchaseDateEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument2.UIPurchaseDateEdit;
            #endregion

            // Verify that the 'Name' property of 'Purchase Date' text box equals 'PurchaseDate'
            Assert.AreEqual(this.AssertMethod45ExpectedValues.UIPurchaseDateEditName, uIPurchaseDateEdit.Name, "Solution should be Purchase Date, otherwise error");
        }
        
        /// <summary>
        /// Testing Payment Date
        /// </summary>
        public void AssertMethod46()
        {
            #region Variable Declarations
            HtmlEdit uIPaymentDateEdit = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument2.UIPaymentDateEdit;
            #endregion

            // Verify that the 'Name' property of 'PaymentDate' text box equals 'PaymentDate'
            Assert.AreEqual(this.AssertMethod46ExpectedValues.UIPaymentDateEditName, uIPaymentDateEdit.Name, "Solution should be Payment Date, otherwise error");
        }
        
        /// <summary>
        /// Testing Create
        /// </summary>
        public void AssertMethod47()
        {
            #region Variable Declarations
            HtmlInputButton uICreateButton = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument2.UICreateButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Create' button equals 'Web'
            Assert.AreEqual(this.AssertMethod47ExpectedValues.UICreateButtonTechnologyName, uICreateButton.TechnologyName, "Solution should be Create, otherwise error");
        }
        
        /// <summary>
        /// Testing Back to list
        /// </summary>
        public void AssertMethod48()
        {
            #region Variable Declarations
            HtmlHyperlink uIBacktoListHyperlink = this.UILoginFinalAssessmentWindow.UICreateFinalAssessmenDocument2.UIBacktoListHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
            Assert.AreEqual(this.AssertMethod48ExpectedValues.UIBacktoListHyperlinkTechnologyName, uIBacktoListHyperlink.TechnologyName, "Solution should be Back To List, otherwise error");
        }
        
        /// <summary>
        /// Testing Edit
        /// </summary>
        public void AssertMethod49()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument2.UIEditHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Edit' link equals 'Web'
            Assert.AreEqual(this.AssertMethod49ExpectedValues.UIEditHyperlinkTechnologyName, uIEditHyperlink.TechnologyName, "Solution should be Edit, otherwise error");
        }
        
        /// <summary>
        /// Testing Details
        /// </summary>
        public void AssertMethod50()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument2.UIDetailsHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Details' link equals 'Web'
            Assert.AreEqual(this.AssertMethod50ExpectedValues.UIDetailsHyperlinkTechnologyName, uIDetailsHyperlink.TechnologyName, "Solution should be Details, otherwise error");
        }
        
        /// <summary>
        /// Testing Delete
        /// </summary>
        public void AssertMethod51()
        {
            #region Variable Declarations
            HtmlHyperlink uIDeleteHyperlink = this.UILoginFinalAssessmentWindow.UIIndexFinalAssessmentDocument2.UIDeleteHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Delete' link equals 'Web'
            Assert.AreEqual(this.AssertMethod51ExpectedValues.UIDeleteHyperlinkTechnologyName, uIDeleteHyperlink.TechnologyName, "Solution should be Delete, otherwise error");
        }
        
        /// <summary>
        /// Testing Delete
        /// </summary>
        public void AssertMethod52()
        {
            #region Variable Declarations
            HtmlInputButton uIDeleteButton = this.UILoginFinalAssessmentWindow.UIDeleteFinalAssessmenDocument1.UIDeleteButton;
            #endregion

            // Verify that the 'TechnologyName' property of 'Delete' button equals 'Web'
            Assert.AreEqual(this.AssertMethod52ExpectedValues.UIDeleteButtonTechnologyName, uIDeleteButton.TechnologyName, "Solution should be Delete, otherwise error");
        }
        
        /// <summary>
        /// Testing Back to list
        /// </summary>
        public void AssertMethod53()
        {
            #region Variable Declarations
            HtmlHyperlink uIBacktoListHyperlink = this.UILoginFinalAssessmentWindow.UIDeleteFinalAssessmenDocument1.UIBacktoListHyperlink;
            #endregion

            // Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
            Assert.AreEqual(this.AssertMethod53ExpectedValues.UIBacktoListHyperlinkTechnologyName, uIBacktoListHyperlink.TechnologyName, "Solution should be Back to list, otherwise error");
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public virtual AssertMethod10ExpectedValues AssertMethod10ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod10ExpectedValues == null))
                {
                    this.mAssertMethod10ExpectedValues = new AssertMethod10ExpectedValues();
                }
                return this.mAssertMethod10ExpectedValues;
            }
        }
        
        public virtual AssertMethod11ExpectedValues AssertMethod11ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod11ExpectedValues == null))
                {
                    this.mAssertMethod11ExpectedValues = new AssertMethod11ExpectedValues();
                }
                return this.mAssertMethod11ExpectedValues;
            }
        }
        
        public virtual AssertMethod12ExpectedValues AssertMethod12ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod12ExpectedValues == null))
                {
                    this.mAssertMethod12ExpectedValues = new AssertMethod12ExpectedValues();
                }
                return this.mAssertMethod12ExpectedValues;
            }
        }
        
        public virtual AssertMethod13ExpectedValues AssertMethod13ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod13ExpectedValues == null))
                {
                    this.mAssertMethod13ExpectedValues = new AssertMethod13ExpectedValues();
                }
                return this.mAssertMethod13ExpectedValues;
            }
        }
        
        public virtual AssertMethod14ExpectedValues AssertMethod14ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod14ExpectedValues == null))
                {
                    this.mAssertMethod14ExpectedValues = new AssertMethod14ExpectedValues();
                }
                return this.mAssertMethod14ExpectedValues;
            }
        }
        
        public virtual AssertMethod15ExpectedValues AssertMethod15ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod15ExpectedValues == null))
                {
                    this.mAssertMethod15ExpectedValues = new AssertMethod15ExpectedValues();
                }
                return this.mAssertMethod15ExpectedValues;
            }
        }
        
        public virtual AssertMethod16ExpectedValues AssertMethod16ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod16ExpectedValues == null))
                {
                    this.mAssertMethod16ExpectedValues = new AssertMethod16ExpectedValues();
                }
                return this.mAssertMethod16ExpectedValues;
            }
        }
        
        public virtual AssertMethod17ExpectedValues AssertMethod17ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod17ExpectedValues == null))
                {
                    this.mAssertMethod17ExpectedValues = new AssertMethod17ExpectedValues();
                }
                return this.mAssertMethod17ExpectedValues;
            }
        }
        
        public virtual AssertMethod18ExpectedValues AssertMethod18ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod18ExpectedValues == null))
                {
                    this.mAssertMethod18ExpectedValues = new AssertMethod18ExpectedValues();
                }
                return this.mAssertMethod18ExpectedValues;
            }
        }
        
        public virtual AssertMethod19ExpectedValues AssertMethod19ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod19ExpectedValues == null))
                {
                    this.mAssertMethod19ExpectedValues = new AssertMethod19ExpectedValues();
                }
                return this.mAssertMethod19ExpectedValues;
            }
        }
        
        public virtual AssertMethod20ExpectedValues AssertMethod20ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod20ExpectedValues == null))
                {
                    this.mAssertMethod20ExpectedValues = new AssertMethod20ExpectedValues();
                }
                return this.mAssertMethod20ExpectedValues;
            }
        }
        
        public virtual AssertMethod21ExpectedValues AssertMethod21ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod21ExpectedValues == null))
                {
                    this.mAssertMethod21ExpectedValues = new AssertMethod21ExpectedValues();
                }
                return this.mAssertMethod21ExpectedValues;
            }
        }
        
        public virtual AssertMethod22ExpectedValues AssertMethod22ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod22ExpectedValues == null))
                {
                    this.mAssertMethod22ExpectedValues = new AssertMethod22ExpectedValues();
                }
                return this.mAssertMethod22ExpectedValues;
            }
        }
        
        public virtual AssertMethod23ExpectedValues AssertMethod23ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod23ExpectedValues == null))
                {
                    this.mAssertMethod23ExpectedValues = new AssertMethod23ExpectedValues();
                }
                return this.mAssertMethod23ExpectedValues;
            }
        }
        
        public virtual AssertMethod24ExpectedValues AssertMethod24ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod24ExpectedValues == null))
                {
                    this.mAssertMethod24ExpectedValues = new AssertMethod24ExpectedValues();
                }
                return this.mAssertMethod24ExpectedValues;
            }
        }
        
        public virtual AssertMethod25ExpectedValues AssertMethod25ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod25ExpectedValues == null))
                {
                    this.mAssertMethod25ExpectedValues = new AssertMethod25ExpectedValues();
                }
                return this.mAssertMethod25ExpectedValues;
            }
        }
        
        public virtual AssertMethod26ExpectedValues AssertMethod26ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod26ExpectedValues == null))
                {
                    this.mAssertMethod26ExpectedValues = new AssertMethod26ExpectedValues();
                }
                return this.mAssertMethod26ExpectedValues;
            }
        }
        
        public virtual AssertMethod27ExpectedValues AssertMethod27ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod27ExpectedValues == null))
                {
                    this.mAssertMethod27ExpectedValues = new AssertMethod27ExpectedValues();
                }
                return this.mAssertMethod27ExpectedValues;
            }
        }
        
        public virtual AssertMethod28ExpectedValues AssertMethod28ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod28ExpectedValues == null))
                {
                    this.mAssertMethod28ExpectedValues = new AssertMethod28ExpectedValues();
                }
                return this.mAssertMethod28ExpectedValues;
            }
        }
        
        public virtual AssertMethod29ExpectedValues AssertMethod29ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod29ExpectedValues == null))
                {
                    this.mAssertMethod29ExpectedValues = new AssertMethod29ExpectedValues();
                }
                return this.mAssertMethod29ExpectedValues;
            }
        }
        
        public virtual AssertMethod30ExpectedValues AssertMethod30ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod30ExpectedValues == null))
                {
                    this.mAssertMethod30ExpectedValues = new AssertMethod30ExpectedValues();
                }
                return this.mAssertMethod30ExpectedValues;
            }
        }
        
        public virtual AssertMethod31ExpectedValues AssertMethod31ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod31ExpectedValues == null))
                {
                    this.mAssertMethod31ExpectedValues = new AssertMethod31ExpectedValues();
                }
                return this.mAssertMethod31ExpectedValues;
            }
        }
        
        public virtual AssertMethod32ExpectedValues AssertMethod32ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod32ExpectedValues == null))
                {
                    this.mAssertMethod32ExpectedValues = new AssertMethod32ExpectedValues();
                }
                return this.mAssertMethod32ExpectedValues;
            }
        }
        
        public virtual AssertMethod33ExpectedValues AssertMethod33ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod33ExpectedValues == null))
                {
                    this.mAssertMethod33ExpectedValues = new AssertMethod33ExpectedValues();
                }
                return this.mAssertMethod33ExpectedValues;
            }
        }
        
        public virtual AssertMethod34ExpectedValues AssertMethod34ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod34ExpectedValues == null))
                {
                    this.mAssertMethod34ExpectedValues = new AssertMethod34ExpectedValues();
                }
                return this.mAssertMethod34ExpectedValues;
            }
        }
        
        public virtual AssertMethod35ExpectedValues AssertMethod35ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod35ExpectedValues == null))
                {
                    this.mAssertMethod35ExpectedValues = new AssertMethod35ExpectedValues();
                }
                return this.mAssertMethod35ExpectedValues;
            }
        }
        
        public virtual AssertMethod36ExpectedValues AssertMethod36ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod36ExpectedValues == null))
                {
                    this.mAssertMethod36ExpectedValues = new AssertMethod36ExpectedValues();
                }
                return this.mAssertMethod36ExpectedValues;
            }
        }
        
        public virtual AssertMethod37ExpectedValues AssertMethod37ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod37ExpectedValues == null))
                {
                    this.mAssertMethod37ExpectedValues = new AssertMethod37ExpectedValues();
                }
                return this.mAssertMethod37ExpectedValues;
            }
        }
        
        public virtual AssertMethod38ExpectedValues AssertMethod38ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod38ExpectedValues == null))
                {
                    this.mAssertMethod38ExpectedValues = new AssertMethod38ExpectedValues();
                }
                return this.mAssertMethod38ExpectedValues;
            }
        }
        
        public virtual AssertMethod39ExpectedValues AssertMethod39ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod39ExpectedValues == null))
                {
                    this.mAssertMethod39ExpectedValues = new AssertMethod39ExpectedValues();
                }
                return this.mAssertMethod39ExpectedValues;
            }
        }
        
        public virtual AssertMethod40ExpectedValues AssertMethod40ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod40ExpectedValues == null))
                {
                    this.mAssertMethod40ExpectedValues = new AssertMethod40ExpectedValues();
                }
                return this.mAssertMethod40ExpectedValues;
            }
        }
        
        public virtual AssertMethod41ExpectedValues AssertMethod41ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod41ExpectedValues == null))
                {
                    this.mAssertMethod41ExpectedValues = new AssertMethod41ExpectedValues();
                }
                return this.mAssertMethod41ExpectedValues;
            }
        }
        
        public virtual AssertMethod42ExpectedValues AssertMethod42ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod42ExpectedValues == null))
                {
                    this.mAssertMethod42ExpectedValues = new AssertMethod42ExpectedValues();
                }
                return this.mAssertMethod42ExpectedValues;
            }
        }
        
        public virtual AssertMethod43ExpectedValues AssertMethod43ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod43ExpectedValues == null))
                {
                    this.mAssertMethod43ExpectedValues = new AssertMethod43ExpectedValues();
                }
                return this.mAssertMethod43ExpectedValues;
            }
        }
        
        public virtual AssertMethod44ExpectedValues AssertMethod44ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod44ExpectedValues == null))
                {
                    this.mAssertMethod44ExpectedValues = new AssertMethod44ExpectedValues();
                }
                return this.mAssertMethod44ExpectedValues;
            }
        }
        
        public virtual AssertMethod45ExpectedValues AssertMethod45ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod45ExpectedValues == null))
                {
                    this.mAssertMethod45ExpectedValues = new AssertMethod45ExpectedValues();
                }
                return this.mAssertMethod45ExpectedValues;
            }
        }
        
        public virtual AssertMethod46ExpectedValues AssertMethod46ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod46ExpectedValues == null))
                {
                    this.mAssertMethod46ExpectedValues = new AssertMethod46ExpectedValues();
                }
                return this.mAssertMethod46ExpectedValues;
            }
        }
        
        public virtual AssertMethod47ExpectedValues AssertMethod47ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod47ExpectedValues == null))
                {
                    this.mAssertMethod47ExpectedValues = new AssertMethod47ExpectedValues();
                }
                return this.mAssertMethod47ExpectedValues;
            }
        }
        
        public virtual AssertMethod48ExpectedValues AssertMethod48ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod48ExpectedValues == null))
                {
                    this.mAssertMethod48ExpectedValues = new AssertMethod48ExpectedValues();
                }
                return this.mAssertMethod48ExpectedValues;
            }
        }
        
        public virtual AssertMethod49ExpectedValues AssertMethod49ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod49ExpectedValues == null))
                {
                    this.mAssertMethod49ExpectedValues = new AssertMethod49ExpectedValues();
                }
                return this.mAssertMethod49ExpectedValues;
            }
        }
        
        public virtual AssertMethod50ExpectedValues AssertMethod50ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod50ExpectedValues == null))
                {
                    this.mAssertMethod50ExpectedValues = new AssertMethod50ExpectedValues();
                }
                return this.mAssertMethod50ExpectedValues;
            }
        }
        
        public virtual AssertMethod51ExpectedValues AssertMethod51ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod51ExpectedValues == null))
                {
                    this.mAssertMethod51ExpectedValues = new AssertMethod51ExpectedValues();
                }
                return this.mAssertMethod51ExpectedValues;
            }
        }
        
        public virtual AssertMethod52ExpectedValues AssertMethod52ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod52ExpectedValues == null))
                {
                    this.mAssertMethod52ExpectedValues = new AssertMethod52ExpectedValues();
                }
                return this.mAssertMethod52ExpectedValues;
            }
        }
        
        public virtual AssertMethod53ExpectedValues AssertMethod53ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod53ExpectedValues == null))
                {
                    this.mAssertMethod53ExpectedValues = new AssertMethod53ExpectedValues();
                }
                return this.mAssertMethod53ExpectedValues;
            }
        }
        
        public UILoginFinalAssessmentWindow UILoginFinalAssessmentWindow
        {
            get
            {
                if ((this.mUILoginFinalAssessmentWindow == null))
                {
                    this.mUILoginFinalAssessmentWindow = new UILoginFinalAssessmentWindow();
                }
                return this.mUILoginFinalAssessmentWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private AssertMethod10ExpectedValues mAssertMethod10ExpectedValues;
        
        private AssertMethod11ExpectedValues mAssertMethod11ExpectedValues;
        
        private AssertMethod12ExpectedValues mAssertMethod12ExpectedValues;
        
        private AssertMethod13ExpectedValues mAssertMethod13ExpectedValues;
        
        private AssertMethod14ExpectedValues mAssertMethod14ExpectedValues;
        
        private AssertMethod15ExpectedValues mAssertMethod15ExpectedValues;
        
        private AssertMethod16ExpectedValues mAssertMethod16ExpectedValues;
        
        private AssertMethod17ExpectedValues mAssertMethod17ExpectedValues;
        
        private AssertMethod18ExpectedValues mAssertMethod18ExpectedValues;
        
        private AssertMethod19ExpectedValues mAssertMethod19ExpectedValues;
        
        private AssertMethod20ExpectedValues mAssertMethod20ExpectedValues;
        
        private AssertMethod21ExpectedValues mAssertMethod21ExpectedValues;
        
        private AssertMethod22ExpectedValues mAssertMethod22ExpectedValues;
        
        private AssertMethod23ExpectedValues mAssertMethod23ExpectedValues;
        
        private AssertMethod24ExpectedValues mAssertMethod24ExpectedValues;
        
        private AssertMethod25ExpectedValues mAssertMethod25ExpectedValues;
        
        private AssertMethod26ExpectedValues mAssertMethod26ExpectedValues;
        
        private AssertMethod27ExpectedValues mAssertMethod27ExpectedValues;
        
        private AssertMethod28ExpectedValues mAssertMethod28ExpectedValues;
        
        private AssertMethod29ExpectedValues mAssertMethod29ExpectedValues;
        
        private AssertMethod30ExpectedValues mAssertMethod30ExpectedValues;
        
        private AssertMethod31ExpectedValues mAssertMethod31ExpectedValues;
        
        private AssertMethod32ExpectedValues mAssertMethod32ExpectedValues;
        
        private AssertMethod33ExpectedValues mAssertMethod33ExpectedValues;
        
        private AssertMethod34ExpectedValues mAssertMethod34ExpectedValues;
        
        private AssertMethod35ExpectedValues mAssertMethod35ExpectedValues;
        
        private AssertMethod36ExpectedValues mAssertMethod36ExpectedValues;
        
        private AssertMethod37ExpectedValues mAssertMethod37ExpectedValues;
        
        private AssertMethod38ExpectedValues mAssertMethod38ExpectedValues;
        
        private AssertMethod39ExpectedValues mAssertMethod39ExpectedValues;
        
        private AssertMethod40ExpectedValues mAssertMethod40ExpectedValues;
        
        private AssertMethod41ExpectedValues mAssertMethod41ExpectedValues;
        
        private AssertMethod42ExpectedValues mAssertMethod42ExpectedValues;
        
        private AssertMethod43ExpectedValues mAssertMethod43ExpectedValues;
        
        private AssertMethod44ExpectedValues mAssertMethod44ExpectedValues;
        
        private AssertMethod45ExpectedValues mAssertMethod45ExpectedValues;
        
        private AssertMethod46ExpectedValues mAssertMethod46ExpectedValues;
        
        private AssertMethod47ExpectedValues mAssertMethod47ExpectedValues;
        
        private AssertMethod48ExpectedValues mAssertMethod48ExpectedValues;
        
        private AssertMethod49ExpectedValues mAssertMethod49ExpectedValues;
        
        private AssertMethod50ExpectedValues mAssertMethod50ExpectedValues;
        
        private AssertMethod51ExpectedValues mAssertMethod51ExpectedValues;
        
        private AssertMethod52ExpectedValues mAssertMethod52ExpectedValues;
        
        private AssertMethod53ExpectedValues mAssertMethod53ExpectedValues;
        
        private UILoginFinalAssessmentWindow mUILoginFinalAssessmentWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Email' text box equals 'Input.Email'
        /// </summary>
        public string UIEmailEditName = "Input.Email";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Password' text box equals 'Input.Password'
        /// </summary>
        public string UIPasswordEditName = "Input.Password";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Log in' button equals 'Web'
        /// </summary>
        public string UILoginButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Forgot your password?' link equals 'Web'
        /// </summary>
        public string UIForgotyourpasswordHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Register as a new user' link equals 'Web'
        /// </summary>
        public string UIRegisterasanewuserHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Email' text box equals 'Input.Email'
        /// </summary>
        public string UIEmailEditName = "Input.Email";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Password' text box equals 'Input.Password'
        /// </summary>
        public string UIPasswordEditName = "Input.Password";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Confirm password' text box equals 'Input.ConfirmPassword'
        /// </summary>
        public string UIConfirmpasswordEditName = "Input.ConfirmPassword";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Register' button equals 'Web'
        /// </summary>
        public string UIRegisterButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Logo' image equals 'Web'
        /// </summary>
        public string UILogoImageTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Customers' link equals 'Web'
        /// </summary>
        public string UICustomersHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Products' link equals 'Web'
        /// </summary>
        public string UIProductsHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Orders' link equals 'Web'
        /// </summary>
        public string UIOrdersHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Hello test@testing.com' link equals 'Web'
        /// </summary>
        public string UIHellotesttestingcomHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Logout' button equals 'Web'
        /// </summary>
        public string UILogoutButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Create New' link equals 'Web'
        /// </summary>
        public string UICreateNewHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Name' text box equals 'Name'
        /// </summary>
        public string UINameEditName = "Name";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Age' text box equals 'Age'
        /// </summary>
        public string UIAgeEditName = "Age";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Phone' text box equals 'Phone'
        /// </summary>
        public string UIPhoneEditName = "Phone";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Create' button equals 'Web'
        /// </summary>
        public string UICreateButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod21ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
        /// </summary>
        public string UIBacktoListHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod22ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Edit' link equals 'Web'
        /// </summary>
        public string UIEditHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod23'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod23ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Delete' link equals 'Web'
        /// </summary>
        public string UIDeleteHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod24ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Delete' button equals 'Web'
        /// </summary>
        public string UIDeleteButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod25'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod25ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
        /// </summary>
        public string UIBacktoListHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod26ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Create New' link equals 'Web'
        /// </summary>
        public string UICreateNewHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod27'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod27ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Pid' text box equals 'Pid'
        /// </summary>
        public string UIPidEditName = "Pid";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod28'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod28ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'ProductName' text box equals 'ProductName'
        /// </summary>
        public string UIProductNameEditName = "ProductName";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod29ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Description' text box equals 'Description'
        /// </summary>
        public string UIDescriptionEditName = "Description";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod30'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod30ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Price' text box equals 'Price'
        /// </summary>
        public string UIPriceEditName = "Price";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod31'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod31ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Rating' text box equals 'Rating'
        /// </summary>
        public string UIRatingEditName = "Rating";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod32'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod32ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Category' text box equals 'Category'
        /// </summary>
        public string UICategoryEditName = "Category";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod33'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod33ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Create' button equals 'Web'
        /// </summary>
        public string UICreateButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod34'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod34ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
        /// </summary>
        public string UIBacktoListHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod35'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod35ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'ProductCategory' combo box equals 'ProductCategory'
        /// </summary>
        public string UIProductCategoryComboBoxName = "ProductCategory";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod36'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod36ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'SearchString' text box equals 'SearchString'
        /// </summary>
        public string UISearchStringEditName = "SearchString";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod37'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod37ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Filter' button equals 'Web'
        /// </summary>
        public string UIFilterButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod38'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod38ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Edit' link equals 'Web'
        /// </summary>
        public string UIEditHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod39'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod39ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Details' link equals 'Web'
        /// </summary>
        public string UIDetailsHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod40'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod40ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Delete' link equals 'Web'
        /// </summary>
        public string UIDeleteHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod41'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod41ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Create New' link equals 'Web'
        /// </summary>
        public string UICreateNewHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod42'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod42ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Create New' link equals 'Web'
        /// </summary>
        public string UICreateNewHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod43'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod43ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Cid' combo box equals 'Cid'
        /// </summary>
        public string UICidComboBoxName = "Cid";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod44'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod44ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Pid' combo box equals 'Pid'
        /// </summary>
        public string UIPidComboBoxName = "Pid";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod45'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod45ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Purchase Date' text box equals 'PurchaseDate'
        /// </summary>
        public string UIPurchaseDateEditName = "PurchaseDate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod46'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod46ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'PaymentDate' text box equals 'PaymentDate'
        /// </summary>
        public string UIPaymentDateEditName = "PaymentDate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod47'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod47ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Create' button equals 'Web'
        /// </summary>
        public string UICreateButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod48'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod48ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
        /// </summary>
        public string UIBacktoListHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod49'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod49ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Edit' link equals 'Web'
        /// </summary>
        public string UIEditHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod50'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod50ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Details' link equals 'Web'
        /// </summary>
        public string UIDetailsHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod51'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod51ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Delete' link equals 'Web'
        /// </summary>
        public string UIDeleteHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod52'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod52ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Delete' button equals 'Web'
        /// </summary>
        public string UIDeleteButtonTechnologyName = "Web";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod53'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class AssertMethod53ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'Back to List' link equals 'Web'
        /// </summary>
        public string UIBacktoListHyperlinkTechnologyName = "Web";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UILoginFinalAssessmentWindow : BrowserWindow
    {
        
        public UILoginFinalAssessmentWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Log in - FinalAssessment";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Log in - FinalAssessment");
            this.WindowTitles.Add("Register - FinalAssessment");
            this.WindowTitles.Add("Home Page - FinalAssessment");
            this.WindowTitles.Add("Index - FinalAssessment");
            this.WindowTitles.Add("Create - FinalAssessment");
            this.WindowTitles.Add("Delete - FinalAssessment");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UILoginFinalAssessmentDocument UILoginFinalAssessmentDocument
        {
            get
            {
                if ((this.mUILoginFinalAssessmentDocument == null))
                {
                    this.mUILoginFinalAssessmentDocument = new UILoginFinalAssessmentDocument(this);
                }
                return this.mUILoginFinalAssessmentDocument;
            }
        }
        
        public UIRegisterFinalAssessmDocument UIRegisterFinalAssessmDocument
        {
            get
            {
                if ((this.mUIRegisterFinalAssessmDocument == null))
                {
                    this.mUIRegisterFinalAssessmDocument = new UIRegisterFinalAssessmDocument(this);
                }
                return this.mUIRegisterFinalAssessmDocument;
            }
        }
        
        public UIHomePageFinalAssessmDocument UIHomePageFinalAssessmDocument
        {
            get
            {
                if ((this.mUIHomePageFinalAssessmDocument == null))
                {
                    this.mUIHomePageFinalAssessmDocument = new UIHomePageFinalAssessmDocument(this);
                }
                return this.mUIHomePageFinalAssessmDocument;
            }
        }
        
        public UIIndexFinalAssessmentDocument UIIndexFinalAssessmentDocument
        {
            get
            {
                if ((this.mUIIndexFinalAssessmentDocument == null))
                {
                    this.mUIIndexFinalAssessmentDocument = new UIIndexFinalAssessmentDocument(this);
                }
                return this.mUIIndexFinalAssessmentDocument;
            }
        }
        
        public UICreateFinalAssessmenDocument UICreateFinalAssessmenDocument
        {
            get
            {
                if ((this.mUICreateFinalAssessmenDocument == null))
                {
                    this.mUICreateFinalAssessmenDocument = new UICreateFinalAssessmenDocument(this);
                }
                return this.mUICreateFinalAssessmenDocument;
            }
        }
        
        public UIDeleteFinalAssessmenDocument UIDeleteFinalAssessmenDocument
        {
            get
            {
                if ((this.mUIDeleteFinalAssessmenDocument == null))
                {
                    this.mUIDeleteFinalAssessmenDocument = new UIDeleteFinalAssessmenDocument(this);
                }
                return this.mUIDeleteFinalAssessmenDocument;
            }
        }
        
        public UIIndexFinalAssessmentDocument1 UIIndexFinalAssessmentDocument1
        {
            get
            {
                if ((this.mUIIndexFinalAssessmentDocument1 == null))
                {
                    this.mUIIndexFinalAssessmentDocument1 = new UIIndexFinalAssessmentDocument1(this);
                }
                return this.mUIIndexFinalAssessmentDocument1;
            }
        }
        
        public UICreateFinalAssessmenDocument1 UICreateFinalAssessmenDocument1
        {
            get
            {
                if ((this.mUICreateFinalAssessmenDocument1 == null))
                {
                    this.mUICreateFinalAssessmenDocument1 = new UICreateFinalAssessmenDocument1(this);
                }
                return this.mUICreateFinalAssessmenDocument1;
            }
        }
        
        public UIIndexFinalAssessmentDocument2 UIIndexFinalAssessmentDocument2
        {
            get
            {
                if ((this.mUIIndexFinalAssessmentDocument2 == null))
                {
                    this.mUIIndexFinalAssessmentDocument2 = new UIIndexFinalAssessmentDocument2(this);
                }
                return this.mUIIndexFinalAssessmentDocument2;
            }
        }
        
        public UICreateFinalAssessmenDocument2 UICreateFinalAssessmenDocument2
        {
            get
            {
                if ((this.mUICreateFinalAssessmenDocument2 == null))
                {
                    this.mUICreateFinalAssessmenDocument2 = new UICreateFinalAssessmenDocument2(this);
                }
                return this.mUICreateFinalAssessmenDocument2;
            }
        }
        
        public UIDeleteFinalAssessmenDocument1 UIDeleteFinalAssessmenDocument1
        {
            get
            {
                if ((this.mUIDeleteFinalAssessmenDocument1 == null))
                {
                    this.mUIDeleteFinalAssessmenDocument1 = new UIDeleteFinalAssessmenDocument1(this);
                }
                return this.mUIDeleteFinalAssessmenDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UILoginFinalAssessmentDocument mUILoginFinalAssessmentDocument;
        
        private UIRegisterFinalAssessmDocument mUIRegisterFinalAssessmDocument;
        
        private UIHomePageFinalAssessmDocument mUIHomePageFinalAssessmDocument;
        
        private UIIndexFinalAssessmentDocument mUIIndexFinalAssessmentDocument;
        
        private UICreateFinalAssessmenDocument mUICreateFinalAssessmenDocument;
        
        private UIDeleteFinalAssessmenDocument mUIDeleteFinalAssessmenDocument;
        
        private UIIndexFinalAssessmentDocument1 mUIIndexFinalAssessmentDocument1;
        
        private UICreateFinalAssessmenDocument1 mUICreateFinalAssessmenDocument1;
        
        private UIIndexFinalAssessmentDocument2 mUIIndexFinalAssessmentDocument2;
        
        private UICreateFinalAssessmenDocument2 mUICreateFinalAssessmenDocument2;
        
        private UIDeleteFinalAssessmenDocument1 mUIDeleteFinalAssessmenDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UILoginFinalAssessmentDocument : HtmlDocument
    {
        
        public UILoginFinalAssessmentDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log in - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Identity/Account/Login";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Identity/Account/Login?ReturnUrl=%2F";
            this.WindowTitles.Add("Log in - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Input_Email";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Input.Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Input.Email\" class=\"form-control\" ";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit.WindowTitles.Add("Log in - FinalAssessment");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Input_Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Input.Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Input.Password\" class=\"form-contro";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Log in - FinalAssessment");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Id] = "login-submit";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log in";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-primary\" id=\"login-submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILoginButton.WindowTitles.Add("Log in - FinalAssessment");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public HtmlHyperlink UIForgotyourpasswordHyperlink
        {
            get
            {
                if ((this.mUIForgotyourpasswordHyperlink == null))
                {
                    this.mUIForgotyourpasswordHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIForgotyourpasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "forgot-password";
                    this.mUIForgotyourpasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIForgotyourpasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIForgotyourpasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Forgot your password?";
                    this.mUIForgotyourpasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Identity/Account/ForgotPassword";
                    this.mUIForgotyourpasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIForgotyourpasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Identity/Account/ForgotPassword";
                    this.mUIForgotyourpasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIForgotyourpasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"forgot-password\" href=\"/Identity/Acc";
                    this.mUIForgotyourpasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIForgotyourpasswordHyperlink.WindowTitles.Add("Log in - FinalAssessment");
                    #endregion
                }
                return this.mUIForgotyourpasswordHyperlink;
            }
        }
        
        public UIAccountCustom UIAccountCustom
        {
            get
            {
                if ((this.mUIAccountCustom == null))
                {
                    this.mUIAccountCustom = new UIAccountCustom(this);
                }
                return this.mUIAccountCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIEmailEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlButton mUILoginButton;
        
        private HtmlHyperlink mUIForgotyourpasswordHyperlink;
        
        private UIAccountCustom mUIAccountCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIAccountCustom : HtmlCustom
    {
        
        public UIAccountCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "account";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"account\" method=\"post\" novalidate=\"n";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Log in - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIRegisterasanewuserHyperlink
        {
            get
            {
                if ((this.mUIRegisterasanewuserHyperlink == null))
                {
                    this.mUIRegisterasanewuserHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIRegisterasanewuserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIRegisterasanewuserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIRegisterasanewuserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIRegisterasanewuserHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Register as a new user";
                    this.mUIRegisterasanewuserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Identity/Account/Register";
                    this.mUIRegisterasanewuserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIRegisterasanewuserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Identity/Account/Register?returnUrl=%2F";
                    this.mUIRegisterasanewuserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIRegisterasanewuserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Identity/Account/Register?returnU";
                    this.mUIRegisterasanewuserHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIRegisterasanewuserHyperlink.WindowTitles.Add("Log in - FinalAssessment");
                    #endregion
                }
                return this.mUIRegisterasanewuserHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIRegisterasanewuserHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIRegisterFinalAssessmDocument : HtmlDocument
    {
        
        public UIRegisterFinalAssessmDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Register - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Identity/Account/Register";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Identity/Account/Register?returnUrl=%2F";
            this.WindowTitles.Add("Register - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Input_Email";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Input.Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Input.Email\" class=\"form-control\" ";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit.WindowTitles.Add("Register - FinalAssessment");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Input_Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Input.Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Input.Password\" class=\"form-contro";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Register - FinalAssessment");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlEdit UIConfirmpasswordEdit
        {
            get
            {
                if ((this.mUIConfirmpasswordEdit == null))
                {
                    this.mUIConfirmpasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIConfirmpasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Input_ConfirmPassword";
                    this.mUIConfirmpasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Input.ConfirmPassword";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Confirm password";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Input.ConfirmPassword\" class=\"form";
                    this.mUIConfirmpasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIConfirmpasswordEdit.WindowTitles.Add("Register - FinalAssessment");
                    #endregion
                }
                return this.mUIConfirmpasswordEdit;
            }
        }
        
        public HtmlButton UIRegisterButton
        {
            get
            {
                if ((this.mUIRegisterButton == null))
                {
                    this.mUIRegisterButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.Id] = "registerSubmit";
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Register";
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-primary\" id=\"registerSubm";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUIRegisterButton.WindowTitles.Add("Register - FinalAssessment");
                    #endregion
                }
                return this.mUIRegisterButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIEmailEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlEdit mUIConfirmpasswordEdit;
        
        private HtmlButton mUIRegisterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIHomePageFinalAssessmDocument : HtmlDocument
    {
        
        public UIHomePageFinalAssessmDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Home Page - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/";
            this.WindowTitles.Add("Home Page - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlImage UILogoImage
        {
            get
            {
                if ((this.mUILogoImage == null))
                {
                    this.mUILogoImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUILogoImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUILogoImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUILogoImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Logo";
                    this.mUILogoImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/Resources/Log.png";
                    this.mUILogoImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://localhost:44385/Resources/Log.png";
                    this.mUILogoImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "/";
                    this.mUILogoImage.FilterProperties[HtmlImage.PropertyNames.Href] = "https://localhost:44385/";
                    this.mUILogoImage.FilterProperties[HtmlImage.PropertyNames.Class] = "logo";
                    this.mUILogoImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "class=\"logo\" alt=\"Logo\" src=\"/Resources/";
                    this.mUILogoImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    this.mUILogoImage.WindowTitles.Add("Home Page - FinalAssessment");
                    #endregion
                }
                return this.mUILogoImage;
            }
        }
        
        public HtmlHyperlink UICustomersHyperlink
        {
            get
            {
                if ((this.mUICustomersHyperlink == null))
                {
                    this.mUICustomersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-link text-dark";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"nav-link text-dark\" href=\"/Custom";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUICustomersHyperlink.WindowTitles.Add("Home Page - FinalAssessment");
                    #endregion
                }
                return this.mUICustomersHyperlink;
            }
        }
        
        public HtmlHyperlink UIProductsHyperlink
        {
            get
            {
                if ((this.mUIProductsHyperlink == null))
                {
                    this.mUIProductsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProductsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIProductsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIProductsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIProductsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Products";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Products";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Products";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-link text-dark";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"nav-link text-dark\" href=\"/Produc";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIProductsHyperlink.WindowTitles.Add("Home Page - FinalAssessment");
                    #endregion
                }
                return this.mUIProductsHyperlink;
            }
        }
        
        public HtmlHyperlink UIOrdersHyperlink
        {
            get
            {
                if ((this.mUIOrdersHyperlink == null))
                {
                    this.mUIOrdersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIOrdersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIOrdersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIOrdersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIOrdersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Orders";
                    this.mUIOrdersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Orders";
                    this.mUIOrdersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIOrdersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Orders";
                    this.mUIOrdersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-link text-dark";
                    this.mUIOrdersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"nav-link text-dark\" href=\"/Orders";
                    this.mUIOrdersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIOrdersHyperlink.WindowTitles.Add("Home Page - FinalAssessment");
                    #endregion
                }
                return this.mUIOrdersHyperlink;
            }
        }
        
        public HtmlHyperlink UIHellotesttestingcomHyperlink
        {
            get
            {
                if ((this.mUIHellotesttestingcomHyperlink == null))
                {
                    this.mUIHellotesttestingcomHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHellotesttestingcomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHellotesttestingcomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHellotesttestingcomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHellotesttestingcomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Hello test@testing.com";
                    this.mUIHellotesttestingcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Identity/Account/Manage";
                    this.mUIHellotesttestingcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Manage";
                    this.mUIHellotesttestingcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Identity/Account/Manage";
                    this.mUIHellotesttestingcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-link text-dark";
                    this.mUIHellotesttestingcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "title=\"Manage\" class=\"nav-link text-dark";
                    this.mUIHellotesttestingcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHellotesttestingcomHyperlink.WindowTitles.Add("Home Page - FinalAssessment");
                    #endregion
                }
                return this.mUIHellotesttestingcomHyperlink;
            }
        }
        
        public HtmlButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Logout";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Class] = "nav-link btn btn-link text-dark";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"nav-link btn btn-link text-dark\" ";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILogoutButton.WindowTitles.Add("Home Page - FinalAssessment");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUILogoImage;
        
        private HtmlHyperlink mUICustomersHyperlink;
        
        private HtmlHyperlink mUIProductsHyperlink;
        
        private HtmlHyperlink mUIOrdersHyperlink;
        
        private HtmlHyperlink mUIHellotesttestingcomHyperlink;
        
        private HtmlButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIIndexFinalAssessmentDocument : HtmlDocument
    {
        
        public UIIndexFinalAssessmentDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Index - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Customers";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Customers";
            this.WindowTitles.Add("Index - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateNewHyperlink
        {
            get
            {
                if ((this.mUICreateNewHyperlink == null))
                {
                    this.mUICreateNewHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create New";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Customers/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Customers/Create\"";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUICreateNewHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUICreateNewHyperlink;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers/Edit/19103";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Customers/Edit/19103";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Customers/Edit/19";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIEditHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers/Delete/19103";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Customers/Delete/19103";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Customers/Delete/";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateNewHyperlink;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UICreateFinalAssessmenDocument : HtmlDocument
    {
        
        public UICreateFinalAssessmenDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Customers/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Customers/Create";
            this.WindowTitles.Add("Create - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Name";
                    this.mUINameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Name";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Name\" class=\"form-control\" id=\"Nam";
                    this.mUINameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUINameEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        
        public HtmlEdit UIAgeEdit
        {
            get
            {
                if ((this.mUIAgeEdit == null))
                {
                    this.mUIAgeEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIAgeEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Age";
                    this.mUIAgeEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Age";
                    this.mUIAgeEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Age";
                    this.mUIAgeEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIAgeEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIAgeEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIAgeEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Age\" class=\"form-control\" id=\"Age\"";
                    this.mUIAgeEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIAgeEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIAgeEdit;
            }
        }
        
        public HtmlEdit UIPhoneEdit
        {
            get
            {
                if ((this.mUIPhoneEdit == null))
                {
                    this.mUIPhoneEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPhoneEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Phone";
                    this.mUIPhoneEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Phone";
                    this.mUIPhoneEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Phone";
                    this.mUIPhoneEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPhoneEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPhoneEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPhoneEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Phone\" class=\"form-control\" id=\"Ph";
                    this.mUIPhoneEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUIPhoneEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIPhoneEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-primary\" type=\"submit\" va";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "5";
                    this.mUICreateButton.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Customers";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Customers\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUINameEdit;
        
        private HtmlEdit mUIAgeEdit;
        
        private HtmlEdit mUIPhoneEdit;
        
        private HtmlInputButton mUICreateButton;
        
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIDeleteFinalAssessmenDocument : HtmlDocument
    {
        
        public UIDeleteFinalAssessmenDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Customers/Delete/19103";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Customers/Delete/19103";
            this.WindowTitles.Add("Delete - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" type=\"submit\" val";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete - FinalAssessment");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Customers";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Customers\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Delete - FinalAssessment");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIIndexFinalAssessmentDocument1 : HtmlDocument
    {
        
        public UIIndexFinalAssessmentDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Index - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Products";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Products";
            this.WindowTitles.Add("Index - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateNewHyperlink
        {
            get
            {
                if ((this.mUICreateNewHyperlink == null))
                {
                    this.mUICreateNewHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create New";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Products/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Products/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Products/Create\"";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUICreateNewHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUICreateNewHyperlink;
            }
        }
        
        public HtmlComboBox UIProductCategoryComboBox
        {
            get
            {
                if ((this.mUIProductCategoryComboBox == null))
                {
                    this.mUIProductCategoryComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIProductCategoryComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ProductCategory";
                    this.mUIProductCategoryComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ProductCategory";
                    this.mUIProductCategoryComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIProductCategoryComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIProductCategoryComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIProductCategoryComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "2";
                    this.mUIProductCategoryComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIProductCategoryComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "name=\"ProductCategory\" id=\"ProductCatego";
                    this.mUIProductCategoryComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIProductCategoryComboBox.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIProductCategoryComboBox;
            }
        }
        
        public HtmlEdit UISearchStringEdit
        {
            get
            {
                if ((this.mUISearchStringEdit == null))
                {
                    this.mUISearchStringEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SearchString";
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SearchString";
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"SearchString\" id=\"SearchString\" ty";
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUISearchStringEdit.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUISearchStringEdit;
            }
        }
        
        public HtmlInputButton UIFilterButton
        {
            get
            {
                if ((this.mUIFilterButton == null))
                {
                    this.mUIFilterButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIFilterButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIFilterButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIFilterButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Filter";
                    this.mUIFilterButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIFilterButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIFilterButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIFilterButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "type=\"submit\" value=\"Filter\"";
                    this.mUIFilterButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIFilterButton.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIFilterButton;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Products/Edit/1";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Products/Edit/1";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Products/Edit/1\"";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIEditHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Products/Details/1";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Products/Details/1";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Products/Details/";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "10";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Products/Delete/1";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Products/Delete/1";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Products/Delete/1";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateNewHyperlink;
        
        private HtmlComboBox mUIProductCategoryComboBox;
        
        private HtmlEdit mUISearchStringEdit;
        
        private HtmlInputButton mUIFilterButton;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UICreateFinalAssessmenDocument1 : HtmlDocument
    {
        
        public UICreateFinalAssessmenDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Products/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Products/Create";
            this.WindowTitles.Add("Create - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIPidEdit
        {
            get
            {
                if ((this.mUIPidEdit == null))
                {
                    this.mUIPidEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPidEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Pid";
                    this.mUIPidEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Pid";
                    this.mUIPidEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Pid";
                    this.mUIPidEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPidEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPidEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPidEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Pid\" class=\"form-control\" id=\"Pid\"";
                    this.mUIPidEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPidEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIPidEdit;
            }
        }
        
        public HtmlEdit UIProductNameEdit
        {
            get
            {
                if ((this.mUIProductNameEdit == null))
                {
                    this.mUIProductNameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIProductNameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ProductName";
                    this.mUIProductNameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ProductName";
                    this.mUIProductNameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "ProductName";
                    this.mUIProductNameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIProductNameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIProductNameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIProductNameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"ProductName\" class=\"form-control\" ";
                    this.mUIProductNameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIProductNameEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIProductNameEdit;
            }
        }
        
        public HtmlEdit UIDescriptionEdit
        {
            get
            {
                if ((this.mUIDescriptionEdit == null))
                {
                    this.mUIDescriptionEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIDescriptionEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Description";
                    this.mUIDescriptionEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Description";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Description";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Description\" class=\"form-control\" ";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUIDescriptionEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIDescriptionEdit;
            }
        }
        
        public HtmlEdit UIPriceEdit
        {
            get
            {
                if ((this.mUIPriceEdit == null))
                {
                    this.mUIPriceEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPriceEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Price";
                    this.mUIPriceEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Price";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Price";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Price\" class=\"form-control\" id=\"Pr";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIPriceEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIPriceEdit;
            }
        }
        
        public HtmlEdit UIRatingEdit
        {
            get
            {
                if ((this.mUIRatingEdit == null))
                {
                    this.mUIRatingEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIRatingEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Rating";
                    this.mUIRatingEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Rating";
                    this.mUIRatingEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Rating";
                    this.mUIRatingEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIRatingEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIRatingEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIRatingEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Rating\" class=\"form-control\" id=\"R";
                    this.mUIRatingEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIRatingEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIRatingEdit;
            }
        }
        
        public HtmlEdit UICategoryEdit
        {
            get
            {
                if ((this.mUICategoryEdit == null))
                {
                    this.mUICategoryEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUICategoryEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Category";
                    this.mUICategoryEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Category";
                    this.mUICategoryEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Category";
                    this.mUICategoryEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUICategoryEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUICategoryEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUICategoryEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Category\" class=\"form-control\" id=";
                    this.mUICategoryEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    this.mUICategoryEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUICategoryEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-primary\" type=\"submit\" va";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "8";
                    this.mUICreateButton.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Products";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Products";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Products\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIPidEdit;
        
        private HtmlEdit mUIProductNameEdit;
        
        private HtmlEdit mUIDescriptionEdit;
        
        private HtmlEdit mUIPriceEdit;
        
        private HtmlEdit mUIRatingEdit;
        
        private HtmlEdit mUICategoryEdit;
        
        private HtmlInputButton mUICreateButton;
        
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIIndexFinalAssessmentDocument2 : HtmlDocument
    {
        
        public UIIndexFinalAssessmentDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Index - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Orders";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Orders";
            this.WindowTitles.Add("Index - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateNewHyperlink
        {
            get
            {
                if ((this.mUICreateNewHyperlink == null))
                {
                    this.mUICreateNewHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create New";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Orders/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Orders/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Orders/Create\"";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUICreateNewHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUICreateNewHyperlink;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Orders/Edit/1";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Orders/Edit/1";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Orders/Edit/1\"";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIEditHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Orders/Details/1";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Orders/Details/1";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Orders/Details/1\"";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Orders/Delete/1";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Orders/Delete/1";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "buttons";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"buttons\" href=\"/Orders/Delete/1\"";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Index - FinalAssessment");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateNewHyperlink;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UICreateFinalAssessmenDocument2 : HtmlDocument
    {
        
        public UICreateFinalAssessmenDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Orders/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Orders/Create";
            this.WindowTitles.Add("Create - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlComboBox UICidComboBox
        {
            get
            {
                if ((this.mUICidComboBox == null))
                {
                    this.mUICidComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUICidComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "Cid";
                    this.mUICidComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "Cid";
                    this.mUICidComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Cid";
                    this.mUICidComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUICidComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUICidComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUICidComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = "form-control";
                    this.mUICidComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "name=\"Cid\" class=\"form-control\" id=\"Cid\"";
                    this.mUICidComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUICidComboBox.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUICidComboBox;
            }
        }
        
        public HtmlComboBox UIPidComboBox
        {
            get
            {
                if ((this.mUIPidComboBox == null))
                {
                    this.mUIPidComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIPidComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "Pid";
                    this.mUIPidComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "Pid";
                    this.mUIPidComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Pid";
                    this.mUIPidComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIPidComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIPidComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "1";
                    this.mUIPidComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = "form-control";
                    this.mUIPidComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "name=\"Pid\" class=\"form-control\" id=\"Pid\"";
                    this.mUIPidComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "2";
                    this.mUIPidComboBox.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIPidComboBox;
            }
        }
        
        public HtmlEdit UIPurchaseDateEdit
        {
            get
            {
                if ((this.mUIPurchaseDateEdit == null))
                {
                    this.mUIPurchaseDateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPurchaseDateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "PurchaseDate";
                    this.mUIPurchaseDateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "PurchaseDate";
                    this.mUIPurchaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Purchase Date";
                    this.mUIPurchaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPurchaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPurchaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPurchaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"PurchaseDate\" class=\"form-control\"";
                    this.mUIPurchaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPurchaseDateEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIPurchaseDateEdit;
            }
        }
        
        public HtmlEdit UIPaymentDateEdit
        {
            get
            {
                if ((this.mUIPaymentDateEdit == null))
                {
                    this.mUIPaymentDateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPaymentDateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "PaymentDate";
                    this.mUIPaymentDateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "PaymentDate";
                    this.mUIPaymentDateEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "PaymentDate";
                    this.mUIPaymentDateEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPaymentDateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPaymentDateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPaymentDateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"PaymentDate\" class=\"form-control\" ";
                    this.mUIPaymentDateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIPaymentDateEdit.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIPaymentDateEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-primary\" type=\"submit\" va";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "4";
                    this.mUICreateButton.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Orders";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Orders";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Orders\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Create - FinalAssessment");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlComboBox mUICidComboBox;
        
        private HtmlComboBox mUIPidComboBox;
        
        private HtmlEdit mUIPurchaseDateEdit;
        
        private HtmlEdit mUIPaymentDateEdit;
        
        private HtmlInputButton mUICreateButton;
        
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.28315.86")]
    public class UIDeleteFinalAssessmenDocument1 : HtmlDocument
    {
        
        public UIDeleteFinalAssessmenDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete - FinalAssessment";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Orders/Delete/1";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44385/Orders/Delete/1";
            this.WindowTitles.Add("Delete - FinalAssessment");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" type=\"submit\" val";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete - FinalAssessment");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Orders";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44385/Orders";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Orders\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Delete - FinalAssessment");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
}
